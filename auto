//https://github.com/AnthonyCalandra/modern-cpp-features#auto
#include <chrono>
#include <future>
#include <iostream>
#include <thread>
#include <numeric>
using namespace std;


template <typename X, typename Y>
auto add(X x, Y y) -> decltype(x + y) {
  return x + y;
}
int main(){

auto a = 3.14; // double
auto b = 1; // int
auto& c = b; // int&
auto d = { 0 }; // std::initializer_list<int>
auto&& e = 1; // int&&
auto&& f = b; // int&
auto g = new auto(123); // int*
const auto h = 1; // const int
auto i = 1, j = 2, k = 3; // int, int, int
//Below 2 cases will fail
//auto l = 1, m = true, n = 1.61; // error -- `l` deduced to be int, `m` is bool
//auto o; // error -- `o` requires initializer


cout << add(1, 2) << endl; // == 3
cout << add(1, 2.0) << endl; // == 3.0
cout << add(1.5, 1.5) << endl; // == 3.0
    return 0;
}
