//https://github.com/AnthonyCalandra/modern-cpp-features#stdforward
#include <chrono>
#include <future>
#include <iostream>
#include <thread>
#include <numeric>
#include <vector>
using namespace std;

struct A {
  A() = default;
  A(const A& o) { std::cout << "copied" << std::endl; }
  A(A&& o) { std::cout << "moved" << std::endl; }
};

template <typename T>
A wrapper(T&& arg) {
  return A{std::forward<T>(arg)};
}

int main()
{
wrapper(A{}); // moved
A a;
wrapper(a); // copied
wrapper(std::move(a)); // moved
    return 0;
}
