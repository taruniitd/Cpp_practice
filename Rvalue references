//https://github.com/AnthonyCalandra/modern-cpp-features#smart-pointers
#include <chrono>
#include <future>
#include <iostream>
#include <thread>
using namespace std;
void f(int& x) {
    cout << "Inside f(int& x) " << endl;
}
void f(int&& x) {
    cout << "Inside f(int&& x) " << endl;
}

int main(){
int x = 0; // `x` is an lvalue of type `int`
int& xl = x; // `xl` is an lvalue of type `int&`
//int&& xr = x; // compiler error -- `x` is an lvalue
int&& xr2 = 0; // `xr2` is an lvalue of type `int&&` -- binds to the rvalue temporary, `0`
    
    
    f(x);  // calls f(int&)
f(xl); // calls f(int&)
f(3);  // calls f(int&&)
f(std::move(x)); // calls f(int&&)
f(xr2);           // calls f(int&)
f(std::move(xr2)); // calls f(int&& x)
    return 0;
}
